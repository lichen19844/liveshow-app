<!-- 主播在直播前预览 -->
<template>
	<view>
		<live-pusher
			id="livePusher"
			ref="livePusher"
			class="livePusher"
			url="url"
			mode="mode"
			:muted="true"
			:enable-camera="enableCamera"
			:auto-focus="true"
			:device-position="position"
			:beauty="beauty"
			whiteness="whiteness"
			aspect="9:16"
			@statechange="statechange"
			@netstatus="netstatus"
			@error="error"
			:style="'height: ' + windowHeight + 'px;'"
			style="width:750rpx;"
		></live-pusher>

		<view v-if="showBars">
			<view style="position:fixed;left:0;right:0;height:550rpx;" :style="'top:' + statusBarHeight + 'px;'">
				<view class="flex align-center justify-center" style="width:90rpx;height:90rpx;" @click="back">
					<text class="iconfont text-white">&#xe607;</text>
				</view>
				<view class="position-absolute rounded p-2 flex align-center" style="left:90rpx;right:100rpx;height:160rpx;background-color:rgba(0,0,0,0.2);">
					<view style="width:120rpx;height:120rpx;" class="position-relative rounded bg-white" @click='chooseCover'>
						<image :src="form.cover || '/static/gift/3.png'" mode="" style="width:120rpx;height:120rpx;"></image>
						<text class="text-white font position-absolute" style="left:0;bottom:0;">更换封面</text>
					</view>
					<view class="flex-1 ml-2">
						<input type="text" v-model="form.title" placeholder="请输入直播标题" class="mb-2" />
						<!-- <text class="text-white font">#请选择分类</text> -->
					</view>
				</view>
				<view class="position-absolute right-0 flex flex-column" style="width:100rpx;">
					<view style="height:120rpx;width:100rpx;" class="flex flex-column justify-center align-center" @click="switchCamera">
						<text class="iconfont text-white mb-1">&#xe605;</text>
						<text class="font text-white">翻转</text>
					</view>
					<view style="height:120rpx;width:100rpx;" class="flex flex-column justify-center align-center" @click="openPopup('mode')">
						<text class="iconfont text-white mb-1">&#xe60c;</text>
						<text class="font text-white">画质</text>
					</view>
					<view style="height:120rpx;width:100rpx;" class="flex flex-column justify-center align-center" @click="openPopup('beauty')">
						<text class="iconfont text-white mb-1">&#xe632;</text>
						<text class="font text-white">美颜</text>
					</view>
					<view style="height:120rpx;width:100rpx;" class="flex flex-column justify-center align-center" @click="openPopup('whiteness')">
						<text class="iconfont text-white mb-1">&#xe631;</text>
						<text class="font text-white">美白</text>
					</view>
				</view>
			</view>

			<!-- 底部按钮 -->
			<view class="position-fixed bg-main flex align-center justify-center rounded-circle" style="left:100rpx;right:100rpx;bottom:100rpx;height:120rpx;" @click="openLiveRoom">
				<text class="text-white font-md font-weight-bolder">开始视频直播</text>
			</view>

			<!-- 画质弹窗 -->
			<uni-popup type="bottom" ref="popup">
				<view class="bg-white" style="">
					<view class="flex align-center justify-center border-bottom" style="height:90rpx;">
						<text class="font-md">{{ popupTitle }}</text>
					</view>

					<!-- 画质选择 -->
					<!-- v-if是根据弹窗弹出时openPopup方法拿到的参数作为此处popupType -->
					<view v-if="popupType === 'mode'">
						<view
							class="flex align-center justify-center py-2"
							v-for="(item, index) in modeList"
							:key="index"
							:class="mode === item.type ? 'bg-main' : ''"
							@click="chooseMode(item)"
						>
							<text class="font-md" :class="mode === item.type ? 'text-white' : ''">{{ item.desc }}</text>
						</view>
					</view>
					<!-- 美颜设置 -->
					<view v-else-if="popupType === 'beauty'">
						<!-- 当前取值为beauty初始值0 -->
						<slider :min="0" :max="9" :step="1" :value="beauty" :block-size="18" show-value @change="handleSliderChange" />
					</view>
					<!-- 美白设置 -->
					<view v-else><slider :min="0" :max="9" :step="1" :value="whiteness" :block-size="18" show-value @change="handleSliderChange" /></view>
					<view class="f-divider"></view>
					<view class="flex align-center justify-center" style="height:90rpx;" hover-class="bg-light" @click="closePopup"><text class="font-md">取消</text></view>
				</view>
			</uni-popup>
		</view>
	</view>
</template>

<script>
import uniPopup from '@/components/uni-ui/uni-popup/uni-popup.vue';
import $H from '@/common/request.js';
import $C from '@/common/config.js';

export default {
	components: {
		uniPopup
	},
	data() {
		return {
			url: '',
			mode: 'SD',
			enableCamera: true,
			position: 'front', // 摄像头位置	front	back
			beauty: 0,
			whiteness: 0,
			windowHeight: 0,
			context: null,
			statusBarHeight: 0,
			modeList: [
				{
					type: 'SD',
					desc: '标清'
				},
				{
					type: 'HD',
					desc: '高清'
				},
				{
					type: 'FHD',
					desc: '超清'
				}
			],
			popupType: 'mode',
			showBars: true,
			form: {
				title: '',
				cover: ''
			}
		};
	},
	onLoad() {
		let res = uni.getSystemInfoSync();
		this.windowHeight = res.windowHeight;
		this.statusBarHeight = res.statusBarHeight;
	},
	computed: {
		popupTitle() {
			let o = {
				mode: '画质',
				beauty: '美颜',
				whiteness: '美白'
			};
			return o[this.popupType];
		}
	},
	onReady() {
		// 注意：需要在onReady中 或 onLoad 延时
		this.context = uni.createLivePusherContext('livePusher', this);
		this.startPreview();
	},
	onBackPress	() {
		this.showBars = false
	},
	methods: {
		// 
		chooseCover() {
			uni.chooseImage({
				count: 1,
				success: (res) => {
					// console.log(res)
					$H.upload(
					'/upload',  // 走/api/upload路由
					{
						filePath: res.tempFilePaths[0]
					},
					(p) => {
						// 上传进度
						console.log('upload progress', p);
					}).then(res => {
						// 上传结果
						// console.log('upload res', res)
						this.form.cover = $C.imageUrl_two + res.url
					})
				}
			})
		},
		// 返回上一页
		back() {
			uni.navigateBack({
				delta: 1
			});
		},
		// 画质选择
		chooseMode(item) {
			this.mode = item.type;
			uni.showToast({
				title: '画质切换为' + item.desc,
				icon: 'none'
			});
		},
		// 画质\美白\美颜的弹窗
		openPopup(type) {
			// 点击的时候popupType会拿到type值
			this.popupType = type;
			this.$refs.popup.open();
		},
		closePopup() {
			this.$refs.popup.close();
		},
		// 切换前后摄像头
		switchCamera() {
			this.context.switchCamera({
				success: e => {
					console.log('livePusher.switchCamera:' + JSON.stringify(e));
				}
			});
		},
		// 开启摄像头预览
		startPreview() {
			this.context.startPreview({
				success: e => {
					console.log('livePusher.startPreview:', e);
					this.position = this.position === 'back' ? 'front' : 'back';
				}
			});
		},
		// 直播状态变化监听
		statechange(e) {
			console.log('statechage e', e);
		},
		// 直播网络变化监听
		netstatus(e) {
			console.log('netstatus e', e);
		},
		error(e) {
			console.log('error e', e);
		},
		handleSliderChange(e) {
			console.log('handleSliderChange e', e.detail.value);
			// 不能写成this.beauty，因为beauty是动态绑定的，不是唯一的，可能会有whiteness等
			// 这么写会使this.beauty拿到值
			this[this.popupType] = e.detail.value;
		},
		openLiveRoom () {
			// if(!this.form.title) {
			// 	uni.showToast({
			// 		title: '直播间标题不能为空',
			// 		icon: 'none'
			// 	})
			// 	return
			// }
			$H.post('/live/create', this.form, {
				token: true
			}).then(res => {
				console.log('create liveroom res', res)
				let options = {
					mode: this.mode,
					position: this.position,
					beauty: this.beauty,
					whiteness: this.whiteness
				}
				options= JSON.stringify(options)
				res = encodeURIComponent(JSON.stringify(res))
				uni.navigateTo({
					url: `../liveroom/liveroom?options=${options}&data=${res}`,
					// url: `../liveroom/liveroom?options=${JSON.stringify(options)}` + `&data=${encodeURIComponent(JSON.stringify(res))}`,
					// url: `../liveroom/liveroom?options=1&data=2`,  // test
				});
			});
		},
	}
};
</script>

<style></style>
