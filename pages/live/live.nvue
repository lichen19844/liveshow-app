<!-- 用户进入主播直播间 -->
<template>
	<view class="page">
		
		<video class="flex-1" :src="src" autoplay :controls="false"></video>
		
		<!-- 头部	top值是手机设备状态栏的高度 -->
		<view style="position: fixed;left: 0;right: 0;" :style="'top:'+statusBarHeight+'px'">
			<!-- 个人信息|观看详细信息 -->
			<view style="height: 80rpx;" class="px-2 flex justify-between align-center">
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					<view class="p">
						<image :src="detail.user.avatar || '/static/tabbar/min.png'" style="width: 70rpx;height: 70rpx;" class="rounded-circle"></image>
					</view>
					<view class="flex-1 flex flex-column justify-center">
						<text class="text-white font">{{ detail.user.username }}</text>
						<text class="text-white font-sm">{{ detail.look_count }}</text>
					</view>
					<view class="p">
						<view class="rounded-circle flex align-center justify-center bg-danger" style="width: 70rpx;height: 70rpx;">
							<text class="text-white">+</text>
						</view>
					</view>
				</view>
				
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle">
					<!-- 实时在线观看用户情况 -->
					<scroll-view scroll-x="true" class="flex-1 flex">
						<view class="p" v-for="(item, index) in list" :key="index">
							<image :src="item.avatar || '/static/tabbar/min.png'" style="width: 70rpx;height: 70rpx;" class="rounded-circle"></image>
						</view>
					</scroll-view>
					<view class="p">
						<view class="rounded-circle flex align-center justify-center bg-danger" style="width: 70rpx;height: 70rpx;">
							<!-- 实时在线观看人数 -->
							<text class="text-white font-sm">{{list.length}}</text>
						</view>
					</view>
				</view>
			</view>
			<!-- 金币 -->
			<view style="height: 80rpx;" class="px-2 my-2">
				<view style="width: 325rpx;background-color: rgba(0,0,0,0.4);" class="flex rounded-circle align-center">
					<view class="p">
						<text class="text-warning">金币</text>
					</view>
					<view class="flex-1 flex flex-column justify-center">
						<text class="text-white font">{{ detail.coin }}</text>
					</view>
				</view>
			</view>
			<!-- 收到礼物 -->
			<f-gift ref="gift"></f-gift>
		</view>
		
		<!-- 弹幕 -->
		<f-danmu ref="danmu"></f-danmu>
		
		<!-- 底部 -->
		<view style="position: fixed;left: 0;bottom: 0;right: 0;height: 120rpx;" class="flex align-center justify-between">
			<view class="px-2">
				<view class="btn px-3" @click="openInput">
					<text class="text-white font">说点什么...</text>
				</view>
			</view>
			<view class="flex align-center">
				<view class="btn btn-icon" @click="openCoin">
					<text class="iconfont text-white" style="font-size: 40px;">&#xe633;</text>
				</view>
				<view class="btn btn-icon bg-warning" @click="openGift">
					<text class="iconfont">&#xe67c;</text>
				</view>
				<view class="btn btn-icon">
					<text class="iconfont text-white">&#xe7cd;</text>
				</view>
				<view class="btn btn-icon" @click="back">
					<text class="iconfont text-white">&#xe607;</text>
				</view>
			</view>
		</view>
		
		
		<!-- 输入框弹出层 -->
		<uni-popup type="bottom" ref="input">
			<view class="bg-white flex align-center px-3" style="height: 120rpx;">
				<input type="text" v-model="content" class="border rounded flex-1 px-3 font-md" placeholder="说点什么..." style="height: 80rpx;"/>
				<view class="flex align-center justify-center py-2 px-2 ml-3 rounded" @click="submit" :class="content === '' ? 'bg-main-disabled' : 'bg-main'">
					<text class="font text-white">发送</text>
				</view>
			</view>
		</uni-popup>
		
		<!-- 送礼物弹出层 -->
		<uni-popup type="bottom" ref="giftPopup">
			<view class="bg-white" style="width: 750rpx;height: 550rpx;">
				<view style="height: 100rpx;" class="flex justify-between align-center">
					<text class="text-main font-md ml-3">礼物</text>
					<view class="flex align-center justify-center" style="width: 100rpx;height: 100rpx;" @click="closeGift">
						<text class="iconfont">&#xe607;</text>
					</view>
				</view>
				<swiper :indicator-dots="true" :duration="500" style="height: 350rpx;" class="border-bottom border-top">
					<swiper-item>
						<view class="flex flex-wrap">
							<view style="width: 187.5rpx;height: 175rpx;" class="flex flex-column justify-center align-center" v-for="(item,index) in gifts" :key="index" :class="giftActiveId === item.id ? 'border border-main' : ''" @click="giftActiveId = item.id">
								<image :src="item.image" style="width: 100rpx;height: 100rpx;"></image>
								<view class="flex mt-1">
									<text class="text-warning font mr-1">{{item.name}}</text>
									<text class="text-secondary font">{{item.coin}}</text>
								</view>
							</view>
						</view>
					</swiper-item>
					<swiper-item>
						<view class="flex flex-wrap">
							<view style="width: 187.5rpx;height: 175rpx;" class="flex flex-column justify-center align-center" v-for="(item,index) in gifts" :key="index" :class="giftActiveId === item.id ? 'border border-main' : ''" @click="giftActiveId = item.id">
								<image :src="item.image" style="width: 100rpx;height: 100rpx;"></image>
								<view class="flex mt-1">
									<text class="text-warning font mr-1">{{item.name}}</text>
									<text class="text-secondary font">{{item.coin}}</text>
								</view>
							</view>
						</view>
					</swiper-item>
					<swiper-item>
						<view class="flex flex-wrap">
							<view style="width: 187.5rpx;height: 175rpx;" class="flex flex-column justify-center align-center" v-for="(item,index) in gifts" :key="index" :class="giftActiveId === item.id ? 'border border-main' : ''" @click="giftActiveId = item.id">
								<image :src="item.image" style="width: 100rpx;height: 100rpx;"></image>
								<view class="flex mt-1">
									<text class="text-warning font mr-1">{{item.name}}</text>
									<text class="text-secondary font">{{item.coin}}</text>
								</view>
							</view>
						</view>
					</swiper-item>
				</swiper>
				<view style="height: 100rpx;" class="flex align-center justify-end">
					<view class="flex align-center justify-center py-2 px-2 mr-3 rounded bg-warning" @click="openCoin">
						<text class="font">充值</text>
					</view>
					<view class="flex align-center justify-center py-2 px-2 mr-3 rounded bg-main" @click="sendGift">
						<text class="font text-white">发送</text>
					</view>
				</view>
			</view>
		</uni-popup>
		
		
	</view>
</template>

<script>
	import fGift from '@/components/live/f-gift.vue';
	import fDanmu from '@/components/live/f-danmu.vue';
	import uniPopup from '@/components/uni-ui/uni-popup/uni-popup.vue';
	import $H from '@/common/request.js';
	import $C from '@/common/config.js';
	
	import { mapState } from 'vuex';
	
	export default {
		components: {
			fGift,
			fDanmu,
			uniPopup
		},
		data() {
			return {
				id: 0,
				detail: {
					"created_time": "",
					"id": 0,
					"title": "",
					"cover": "",
					"user_id": 0,
					"look_count": 0,
					"coin": 0,
					"key": "",
					"status": 0,
					"updated_time": null,
					"deleted_time": null,
					"userId": 0,
					"user": {
						"id": 0,
						"username": "",
						"avatar": ""
					}
				},
				sign: '',
				statusBarHeight:0,
				content: '',
				gifts: [],
				giftActiveId: 0,
				// 在线用户列表
				list: []
			}
		},
		onLoad(e) {
			// console.log('liveroom id', e.id)
			this.id = e.id
			let res = uni.getSystemInfoSync()
			// 获取手机设备状态栏高度
			this.statusBarHeight = res.statusBarHeight
			
			$H.get('/live/read/' + this.id).then(res=>{
				this.detail = res.data
				// this.detail.user.avatar = $C.imageUrl_one + this.detail.user.avatar
        this.detail.user.avatar = $C.imageUrl_two + this.detail.user.avatar
				console.log('live detail data', this.detail)
				this.sign = res.sign
			})
				
			$H.get('/gift/list').then(res=>{
				this.gifts = res.map(item=>{
					// item.image = $C.baseUrl_one + item.image
					item.image = $C.baseUrl_two + item.image
					return item
				})
			})
			// 礼物演示
			// this.gifts = demoGifts
			
			// 处理最终到达这里的后端用户列表数据
			// uni.$on('live', (e) => {
			// 	console.log('live e', e)
			// })
			// 监听全局事件(由uni.$emit触发)，虽然放在加载一次页面的onload里，但是由于是监听功能，回调函数handleLiveEvent可以根据需求实时更新页面数据
			uni.$on('live', this.handleLiveEvent)
		},
		mounted() {
			// 送礼物演示
			// setInterval(()=>{
			// 	this.$refs.gift.send({
			// 		username:"发送人",
			// 		avatar:"",
			// 		gift_name:"蛋糕",
			// 		gift_image:"/static/gift/3.png",
			// 		num:1
			// 	})
			// },3000)
			
			// 发送弹幕演示
			// let id = 1
			// setInterval(()=>{
			// 	this.$refs.danmu.send({
			// 		id:id,
			// 		name:"昵称"+id,
			// 		content:"测试内容"+id
			// 	})
			// 	id++
			// },3000)
			
			// 页面加载时加入直播间
			this.joinOrLeaveLive('join')
		},
		// 页面销毁时离开直播间
		destroyed() {
			this.joinOrLeaveLive('leave')
			// 移除全局事件
			uni.$off('live', this.handleLiveEvent)
		},
		computed: {
			// 直播拉流地址，多个属性影响一个属性时使用computed
			src() {
				if(this.detail.key == '' || this.sign == ''){
					return ''
				}
				return `http://192.168.1.7:23481/live/${this.detail.key}.flv?sign=${this.sign}`
			},
			...mapState({
				socket: state => state.socket,
				token: state => state.token
			}),
		},
		
		methods: {
			
			// 处理最终到达这里的后端用户列表数据
			handleLiveEvent(e) {
				console.log('handleLiveEvent data', e)
				let d = e.data
				switch (e.type){
					case 'online':
					// 加入时渲染页面，退出则不管
					if(d.action === 'join') {
						this.list = d.data
						this.list.map(item => {
							// item.avatar = $C.imageUrl_one + item.avatar
							item.avatar = $C.imageUrl_two + item.avatar
						})
					}
						break;
						
					case 'comment':
						this.$refs.danmu.send({
							// id: d.user.id,  // 如果使用user.id，那么当该用户连续发言时，scroll-into-view就不能定位到相应的item.id的view子组件
							id: d.id,
							name: d.user.name,
							content: d.content
						})
						
						// 发送成功后触发
						this.content = ''
						this.$refs.input.close()
						break;
						
					case 'gift':
            // d.gift_image = $C.imageUrl_one + d.gift_image
						// d.avatar = $C.imageUrl_one + d.avatar
						d.gift_image = $C.imageUrl_two + d.gift_image
						d.avatar = $C.imageUrl_two + d.avatar
						// detail.coin由于处于监听函数中，所以不受onload的影响，可以实时更新其显示
						this.detail.coin += d.gift_coin * d.num
						// this.detail.look_count += 1
						this.$refs.gift.send(
							// {
							// 	username: this.$store.state.user.username,	//  "发送人"
							// 	avatar: this.$store.state.user.avatar || "",
							// 	gift_name: g.name,
							// 	gift_image: g.image,
							// 	num:1
							// }
							d
						)
						this.closeGift()
						break;
						
					default:
						break;
				}
			},
			
			// 用户加入或离开直播间时，把live_id和用户token传给后端路由对应的方法里去
			joinOrLeaveLive(type) {
				if(this.socket && this.token) {
					this.socket.emit(type + 'Live', {
						live_id: this.id,
						token: this.token
					})
				}
			},
			
			// 送礼物
			sendGift(){
				// 如果没有选中礼物
				if(this.giftActiveId === 0){
					return uni.showToast({
						title: '请选择要发送的礼物',
						icon: 'none'
					});
				}
				let index = this.gifts.findIndex(item=>item.id === this.giftActiveId)
				if(index === -1){
					return
				}
				// 找到具体礼物
				let g = this.gifts[index]
				if(!this.token && !this.socket) {
					uni.navigateTo({
						url: '../login/login'
					})
					return uni.showToast({
						title: '请先登录',
						icon: 'none'
					});
				};
				// 通过socket发送数据标识到后端，后端通过路由gift和其方法里ctx.args[0]接收
				if(this.socket) {
					// console.log(this.id, g.id, this.token)
					this.socket.emit('gift', {
						live_id: this.id,
						gift_id: g.id,
						token: this.token
					})
				};
				
				// console.log(this.$store.state.user)
				// this.$refs.gift.send({
				// 	username: this.$store.state.user.username,	//  "发送人"
				// 	avatar: this.$store.state.user.avatar || "",
				// 	gift_name: g.name,
				// 	gift_image: g.image,
				// 	num:1
				// })
				// this.closeGift()
			},
			
			back(){
				uni.navigateBack({
					delta: 1
				});
			},
			
			openGift(){
				this.$refs.giftPopup.open()
			},
			
			closeGift(){
				this.$refs.giftPopup.close()
			},
			
			openInput(){
				this.$store.dispatch('authMethod',()=>{
					this.$refs.input.open()
				})
			},
			
			// 发送弹幕
			submit(){
				if(!this.token && !this.socket) {
					uni.navigateTo({
						url: '../login/login'
					})
					return uni.showToast({
						title: '请先登录',
						icon: 'none'
					});
				};
				
				if(this.content === ''){
					return uni.showToast({
						title: '评论内容不能为空',
						icon: 'none'
					});
				};
				
				if(this.socket) {
					this.socket.emit('comment', {
						live_id: this.id,
						token: this.token,
						data: this.content
					})
				};
				
				// this.$refs.danmu.send({
				// 	id:Math.random()*100,
				// 	name:this.$store.state.user.username,	// "昵称"
				// 	content:this.content
				// })
				
				// 发送成功后触发
				// this.content = ''
				// this.$refs.input.close()
			},
			
			openCoin(){
				uni.navigateTo({
					url: '../coin/coin'
				});
			}
		}
	}
</script>

<style>
.page{
	flex: 1;
}
.btn{
	height: 80rpx;
	border-radius: 100rpx;
	background-color: rgba(255,255,255,0.12);
	align-items: center;
	justify-content: center;
}
.btn-icon{
	width: 80rpx;
	margin-right: 20rpx;
}
</style>
