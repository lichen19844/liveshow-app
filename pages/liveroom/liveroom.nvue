<!-- 主播开直播 -->
<template>
	<view class="page">
		<!-- 视频源 -->
		<!-- <video class="flex-1" src="http://ivi.bupt.edu.cn/hls/cctv2hd.m3u8" autoplay :controls="false" muted></video> -->
		<live-pusher
			id="livePusher"
			ref="livePusher"
			class="livePusher"
			:url="src"
			mode="mode"
			:muted="true"
			:enable-camera="enableCamera"
			:auto-focus="true"
			:device-position="position"
			:beauty="beauty"
			whiteness="whiteness"
			aspect="9:16"
			@statechange="statechange"
			@netstatus="netstatus"
			@error="error"
			:style="'height: ' + windowHeight + 'px;'"
			style="width:750rpx;"
		></live-pusher>

		<!-- 头部	top值是手机设备状态栏的高度 -->
		<view style="position: fixed;left:0;right:0;" :style="'top:' + statusBarHeight + 'px;'">
			<!-- 个人信息和观看情况 -->
			<view style="height:80rpx;" class="px-2 flex justify-between align-center">
				<!-- 左边 -->
				<view style="width:325rpx;background-color:rgba(0,0,0,.4);" class="flex justify-between align-center rounded-circle">
					<view class="p">
						<image :src="user.avatar || '/static/tabbar/min.png'" mode="" style="width:70rpx;height:70rpx;" class="rounded-circle"></image>
					</view>
					<view class="flex-1 flex-column justify-center align-start">
						<text class="text-white font">{{user.nickname || user.username}}</text>
						<text class="text-white font-sm">{{detail.look_count}}</text>
					</view>
					<view class="p">
						<view class="rounded-circle flex justify-center align-center bg-danger" style="width:70rpx;height:70rpx;">
							<text class="text-white">+</text>
						</view>
					</view>
				</view>
				<!-- 右边 -->
				<view style="width:325rpx;background-color:rgba(0,0,0,.4);" class="flex justify-between align-center rounded-circle">
					<scroll-view scroll-x="true" class="flex flex-1">
						<view class="p" v-for="(item, index) in list" :key="index">
							<image :src="item.avatar || '/static/tabbar/min.png'" style="width: 70rpx;height: 70rpx;" class="rounded-circle"></image>
						</view>
					</scroll-view>
					<view class="p">
						<view class="rounded-circle flex justify-center align-center bg-danger" style="width:70rpx;height:70rpx;">
							<text class="text-white font-sm">{{list.length}}</text>
						</view>
					</view>
				</view>
			</view>
			<!-- 金币 -->
			<view style="height:80rpx;" class="px-2 my-2">
				<view style="width:325rpx;" class="flex justify-between align-center rounded-circle">
					<view class="p">
						<text class="font-lg text-warning">金币</text>
					</view>
					<view class="flex-1 flex-column justify-center align-start">
						<text class="text-white font">{{ detail.coin }}</text>
					</view>
				</view> 
			</view>
			<!-- 收到礼物 -->
			<f-gift ref="gift"></f-gift>
			<!-- 弹幕 -->
			<f-danmu ref="danmu"></f-danmu>
		</view>

		<!-- 底部，用户操作区 -->
		<view style="position:fixed; left:0; bottom:0; right:0; height: 120rpx;" class="flex align-center justify-between">
			<view class="flex-1 flex flex-column align-center justify-center" v-for="(item, index) in btns" :key="index" @click="handleBottomEvent(item)">
				<text class="iconfont text-white mb-1" style="">{{item.icon}}</text>
				<text class="text-white font">{{item.name}}</text>
			</view>
		</view>
		
		<!-- 画质弹窗 -->
		<uni-popup type="bottom" ref="popup">
			<view class="bg-white" style="">
				<view class="flex align-center justify-center border-bottom" style="height:90rpx;">
					<text class="font-md">{{ popupTitle }}</text>
				</view>
		
				<!-- 画质选择 -->
				<!-- v-if是根据弹窗弹出时handleBottomEvent方法拿到的参数popupType -->
				<view v-if="popupType === 'mode'">
					<view
						class="flex align-center justify-center py-2"
						v-for="(item, index) in modeList"
						:key="index"
						:class="mode === item.type ? 'bg-main' : ''"
						@click="chooseMode(item)"
					>
						<text class="font-md" :class="mode === item.type ? 'text-white' : ''">{{ item.desc }}</text>
					</view>
				</view>
				<!-- 美颜设置 -->
				<view v-else-if="popupType === 'beauty'">
					<!-- 当前取值为beauty初始值0 -->
					<slider :min="0" :max="9" :step="1" :value="beauty" :block-size="18" show-value @change="handleSliderChange" />
				</view>
				<!-- 美白设置 -->
				<view v-else-if="popupType === 'whiteness'"><slider :min="0" :max="9" :step="1" :value="whiteness" :block-size="18" show-value @change="handleSliderChange" /></view>
				<!-- 更多 -->
				<view v-else class="flex flex-wrap">
					<view class="flex flex-column align-center justify-center" style="width:150rpx;height:150rpx;" @click="pauseOrPlay">
						<text class="iconfont  mb-1" style="">&#xe611;</text>
						<text class=" font">{{isPause ? '继续' : '暂停'}}</text>
					</view>
					<view class="flex flex-column align-center justify-center" style="width:150rpx;height:150rpx;" @click="back">
						<text class="iconfont  mb-1" style="">&#xe64d;</text>
						<text class=" font">退出</text>
					</view>
				</view>
				<view class="f-divider"></view>
				<view class="flex align-center justify-center" style="height:90rpx;" hover-class="bg-light" @click="closePopup"><text class="font-md">取消</text></view>
			</view>
		</uni-popup>
	</view>
</template>

<script>
	import fGift from '@/components/live/f-gift.vue';
	import fDanmu from '@/components/live/f-danmu.vue';
	// import demoGifts from '@/demo/gifts.js';
	import uniPopup from '@/components/uni-ui/uni-popup/uni-popup.vue';
	import { mapState } from 'vuex';
	import $H from '@/common/request.js';
	import $C from '@/common/config.js';
	
	export default {
		components: {
			fGift,
			fDanmu,
			uniPopup,
		},
		data() {
			return {
				statusBarHeight:0,
				content: '',
				gifts: [],
				giftActiveId: 0,
				
				// url: '',
				mode: 'SD',
				enableCamera: true,
				position: 'front', // front	back
				beauty: 0,
				whiteness: 0,
				windowHeight: 0,
				context: null,
				statusBarHeight: 0,
				modeList: [
					{
						type: 'SD',
						desc: '标清'
					},
					{
						type: 'HD',
						desc: '高清'
					},
					{
						type: 'FHD',
						desc: '超清'
					}
				],
				popupType: 'mode',
				btns: [{
					name: '翻转',
					icon: '\ue605',
					event: 'switchCamera'
				},{
					name: '画质',
					icon: '\ue60c',
					event: 'openPopup',
					params: 'mode'
				},{
					name: '美颜',
					icon: '\ue632',
					event: 'openPopup',
					params: 'beauty'
				},{
					name: '美白',
					icon: '\ue631',
					event: 'openPopup',
					params: 'whiteness'
				},{
					name: '更多',
					icon: '\ue84b',
					event: 'openPopup',
					params: 'more'
				}],
				detail: {
					"created_time": "",
					"id": 0,
					"title": "",
					"cover": "",
					"user_id": 0,
					"look_count": 0,
					"coin": 0,
					"key": "",
					"status": 0,
					"updated_time": null,
					"deleted_time": null,
					"userId": 0,
					"user": {
						"id": 0,
						"username": "",
						"avatar": ""
					}
				},
				sign: '',
				list: [],
				// 是否开启、暂停推流
				isStart: false,
				isPause: false,
				// 防止不小心按到手机返回键退出的标识，为true标识用户自己的意愿要退出
				isget: false,
			}
		},
		onLoad(e) {
			// 获取手机设备状态栏高度
			let res = uni.getSystemInfoSync()
			this.windowHeight = res.windowHeight;
			this.statusBarHeight = res.statusBarHeight
			// 礼物演示
			// this.gifts = demoGifts
			if(e.options) {
				console.log('e.options', e.options)
				let options = JSON.parse(e.options)
				this.mode = options.mode
				this.position = options.position
				this.beauty = options.beauty
				this.whiteness = options.whiteness
			}
			if(e.data) {
				console.log('e.data', e.data)
				let d = JSON.parse(decodeURIComponent(e.data))
				this.detail = d.data
				this.sign = d.sign
			}
			// 监听全局事件(由uni.$emit触发)，虽然放在加载一次页面的onload里，但是由于是监听功能，回调函数handleLiveEvent可以根据需求实时更新页面数据
			uni.$on('live', this.handleLiveEvent)
		},
		computed: {
			// 直播拉流地址，多个属性影响一个属性时使用computed
			src() {
				if(this.detail.key == '' || this.sign == ''){
					return ''
				}
				return `http://192.168.1.7:23480/live/${this.detail.key}?sign=${this.sign}`
			},
			...mapState({
				user: state => state.user,
				socket: state => state.socket,
				token: state => state.token
			}),
			popupTitle() {
				let o = {
					mode: '画质',
					beauty: '美颜',
					whiteness: '美白',
					more: '更多'
				};
				return o[this.popupType];
			}
		},
		onReady() {
			// 注意：需要在onReady中 或 onLoad 延时
			this.context = uni.createLivePusherContext('livePusher', this);
			this.startPreview();
			// 开始推流
			this.start()
		},
		mounted () {
			// 送礼物演示
			// setInterval(() => {
			// 	this.$refs.gift.send({
			// 		username: "发送人",
			// 		avatar: "",
			// 		gift_name: "蛋糕",
			// 		gift_image: "/static/gift/3.png",
			// 		num: 1
			// 	})
			// }, 3000)
			
			// 发送弹幕演示
			// let id = 1
			// setInterval(() => {
			// 	this.$refs.danmu.send({
			// 		id: id,
			// 		name: '昵称' + id,
			// 		content: '礼晨加油~' + id
			// 	})
			// 	id++
			// }, 3000)
			
			// 页面加载时加入直播间
			// this.joinOrLeaveLive('join')
		},
		// 页面销毁时离开直播间
		destroyed() {
			this.joinOrLeaveLive('leave')
			// 移除全局事件
			uni.$off('live', this.handleLiveEvent)
		},
		// 监听手机返回按钮
		onBackPress() {
			// 不小心触发返回键
			if(!this.isget) {
				this.back()
				return true
			}
		},
		
		methods: {
			pauseOrPlay() {
				// 没有暂停时点击，出弹框选择是否暂停
				if(!this.isPause) {
					let _t = this
					// 输入uconfirm出现以下代码格式
					return uni.showModal({
						content: '是否要暂停推流？',
						success: (res) => {
							if (res.confirm) {
								_t.pause()	
							} else if (res.cancel) {
								return
							}
						}
					});
				}
				// 暂停时点击则继续
				this.resume()
			},
			// 退出直播
			back() {
				let _t = this
				uni.showModal({
					content: '是否要结束当前直播？',
					success: function (res) {
						if (res.confirm) {
							_t.stop()
							// 防止不小心按到手机返回键退出的标识，为true标识用户自己的意愿要退出
							this.isget = true
							// 这里有bug，无法正常返回
							console.log('test back to index page')
							// uni.navigateBack({ delta: 1 })
							uni.switchTab({
								url: '/pages/index/index',
								// success: res => {},fail: () => {},complete: () => {}
							})
							uni.showToast({
								title: '退出直播间成功',
								icon: 'none'
							});
						} else if (res.cancel) {
							return
						}
					}
				});
			},
			
			// 开始推流
			start() {
				this.context.start({
					success: () => {
						this.isStart = true
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: 'play',
						},{
							token: true
						}).then(res => {
							// 把主播自己加入观看列表中，同时防止掉线
							this.joinOrLeaveLive('join')
						}).catch(err => {
							console.log(err)
						})
					}
				})
			},
			// 暂停推流
			pause() {
				this.context.pause({
					success: () => {
						this.isPause = true
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: 'pause',
						},{
							token: true
						})
					}
				})
			},
			// 继续推流
			resume() {
				this.context.resume({
					success: () => {
						this.isPause = false
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: 'play',
						},{
							token: true
						})
					}
				})
			},
			// 停止推流
			stop() {
				this.context.stop({
					success: () => {
						this.isStart = false
						$H.post('/live/changestatus', {
							id: this.detail.id,
							type: 'stop',
						},{
							token: true
						})
					}
				})
			},
			
			// 处理最终到达这里的后端用户列表数据
			handleLiveEvent(e) {
				console.log('handleLiveEvent data', e)
				let d = e.data
				switch (e.type){
					case 'online':
					// 加入时渲染页面，退出则不管
					if(d.action === 'join') {
						this.list = d.data
						this.list.map(item => {
							// item.avatar = $C.imageUrl_one + item.avatar
							item.avatar = $C.imageUrl_two + item.avatar
						})
					}
						break;
						
					case 'comment':
						this.$refs.danmu.send({
							// id: d.user.id,  // 如果使用user.id，那么当该用户连续发言时，scroll-into-view就不能定位到相应的item.id的view子组件
							id: d.id,
							name: d.user.name,
							content: d.content
						})
						break;
						
					case 'gift':
            // d.gift_image = $C.imageUrl_one + d.gift_image
						// d.avatar = $C.imageUrl_one + d.avatar
						d.gift_image = $C.imageUrl_two + d.gift_image
						d.avatar = $C.imageUrl_two + d.avatar
						// detail.coin由于处于监听函数中，所以不受onload的影响，可以实时更新其显示
						this.detail.coin += d.gift_coin * d.num
						// this.detail.look_count += 1
						this.$refs.gift.send(d)
						break;
						
					default:
						break;
				}
			},
			
			// 加入或离开直播间时，把live_id和用户token传给后端路由对应的方法里去
			joinOrLeaveLive(type) {
				if(this.socket && this.token) {
					this.socket.emit(type + 'Live', {
						live_id: this.detail.id,
						token: this.token
					})
				}
			},
			
			handleBottomEvent(item) {
				// 会去调用this.switchCamera()或this.openPopup(type)，item.params作为type
				this[item.event](item.params)
			},
			
			// 画质选择
			chooseMode(item) {
				this.mode = item.type;
				uni.showToast({
					title: '画质切换为' + item.desc,
					icon: 'none'
				});
			},
			// 画质\美白\美颜的弹窗
			openPopup(type) {
				// 点击的时候popupType会拿到type值
				this.popupType = type;
				this.$refs.popup.open();
			},
			closePopup () {
				this.$refs.popup.close();
			},
			// 切换前后摄像头
			switchCamera() {
				this.context.switchCamera({
					success: e => {
						console.log('livePusher.switchCamera:' + JSON.stringify(e));
					}
				});
			},
			// 开启摄像头预览
			startPreview() {
				this.context.startPreview({
					success: e => {
						console.log('livePusher.startPreview:', e);
						this.position = this.position === 'back' ? 'front' : 'back';
					}
				});
			},
			// 直播状态变化监听
			statechange(e) {
				console.log('statechage e', e);
			},
			// 直播网络变化监听
			netstatus(e) {
				console.log('netstatus e', e);
			},
			error(e) {
				console.log('error e', e);
			},
			handleSliderChange(e) {
				console.log('handleSliderChange e', e.detail.value);
				// 不能写成this.beauty，因为beauty是动态绑定的，不是唯一的，可能会有whiteness等
				// 这么写会使this.beauty拿到值
				this[this.popupType] = e.detail.value;
			},
		}
	}
</script>

<style>
	.page {
		/* border: 10px solid; */
		flex: 1;
		/* background-color: red; */
	}
	.btn {
		height:80rpx;
		border-radius:100rpx;
		background-color:rgba(255,255,255,.12);
		display: flex;
		align-items: center;
		justify-content: center;
	}
</style>
